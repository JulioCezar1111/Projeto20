# -*- coding: utf-8 -*-
"""Regressão_Logistica_e_binary_cross_entropy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qxqDX3keSOro9FRgk0RWYOblc_tgW7nN

**RECEITA DE TREINAMENTO**
* 1 - DESIGN DO MODELO (INPUT, OUTPUT, FORWARD PASS)
* 2 - DEFINIÇAO DA FUNÇÃO DE CUSTO E OTIMIZADOR
* 3 - LOOP DE TREINAMENTO:
    - FORWARD PASS: CALCULAR A PREDIÇÃO E O CUSTO
    - BACKWARPASS: CALCULAR OS GRADIENTES
    - ATUALIZAR OS PESOS

# **Instalar Bibliotecas:**
"""

import torch
import torch.nn as nn
import numpy as np
import time
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw
from torch.autograd import variable

"""# **Preparação DataSet**"""

x_numpy = np.array([5,7,2,9,4,10,9,4,6,1])
y_numpy = np.array([1,1,0,1,0,1,1,0,1,0])


x = torch.from_numpy(x_numpy.astype(np.float32))
y = torch.from_numpy(y_numpy.astype(np.float32))
y = y.view(y.shape[0], 1) # Mudando a direção para vertical
x = x.view(x.shape[0], 1)

print(x.shape)
print(y.shape)

plt.plot(x_numpy, y_numpy, 'go')

"""# **CLASS DE REGRESSÃO LOGÍSTICA**"""

class RegressaoLogistica(nn.Module):
  def __init__(self, n_input, n_output):
    super(RegressaoLogistica, self).__init__()
    self.Linear = nn.Linear(n_input, 1) # Objeto para regressão linear (nn.LInear('qtd_entrada', 'qtd_saida'))

  def forward(self, x): # metoda para ser chamado no modelo
    y_hat = torch.sigmoid(self.Linear(x)) # Calcular a função linear e aplicar a sigmoid
    return y_hat

"""# **DEFINICIÇÃO DE MODELO**"""

input_size = 1
output_size = 1
model = RegressaoLogistica(input_size, output_size) # Chamando o objeto

"""# **DEFINIÇÃO DA FUNÇAO DE CUSTO E OTIMIZADOR**"""

learning_rate = 0.01
criterion = nn.BCELoss() # Função de custo
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate) # Otimizador
print (model.parameters())

"""# **LOOP DE TREINAMENTO**"""

num_epochs = 200 # repetir o looping
contador_custo = []

for epoch in range(num_epochs):

  #forward pass and loos
  y_hat = model(x) # valor previsto
  loss = criterion(y_hat, y)
  contador_custo.append(loss.detach().numpy())
  #print(y_hat)

  
  #backward pass (calcular gradientes)
  loss.backward()

  #update (atualizar os pesos)
  optimizer.step()

  if (epoch+1)%10 == 0:

      print("===============================")
      print('Epoch: ', epoch)
      print('Custo: {:.20f}'.format(loss.item())) 
      print('m: {:.5f}'.format(model.Linear.weight.data.detach().item()))
      print('m (gradiente): {:.5f}'.format(model.Linear.weight.grad.detach().item()))
      print('b: {:.5f}'.format(model.Linear.bias.data.detach().item()))
      print('b (gradiente): {:.5f}'.format(model.Linear.bias.grad.detach().item()))

     
  #limpar o otimizador
  optimizer.zero_grad()

"""# **PLOTANDO O GRÁFICO DA FUNÇÃO DE CUSTO**"""

print("GRÁFICO DA FUNÇÃO DE CUSTO")
plt.plot(contador_custo, 'r')
plt.show()

"""# **fazer predição de teste**"""

from contextlib import nullcontext

teste = np.array([2, 3, 6, 7, 8])
t_teste = torch.from_numpy(teste.astype(np.float32))
t_teste = t_teste.view(t_teste.shape[0], 1)

with torch.no_grad(): # Evitar de atualizar os gradientes

  predicoes = model(t_teste)

  for x, y in zip(t_teste, predicoes):

    #definindo o cutoff / threshold
    status = nullcontext

    if (y >= 0.7):

      status = "aprovado"

    else:

      status = "reprovado"

    print ('x: {:.2f} | ŷ: {:.2f} | '.format(x.detach().item(),y.detach().item()), status)